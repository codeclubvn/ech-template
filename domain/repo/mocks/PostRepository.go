// Code generated by mockery v2.34.2. DO NOT EDIT.

package mocks

import (
	context "context"
	model "echo_template/domain/repo/model"

	mock "github.com/stretchr/testify/mock"

	request "echo_template/presenter/request"
)

// PostRepository is an autogenerated mock type for the PostRepository type
type PostRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, post
func (_m *PostRepository) Create(ctx context.Context, post *model.Post) error {
	ret := _m.Called(ctx, post)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.Post) error); ok {
		r0 = rf(ctx, post)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteById provides a mock function with given fields: ctx, id
func (_m *PostRepository) DeleteById(ctx context.Context, id string) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetList provides a mock function with given fields: ctx, req
func (_m *PostRepository) GetList(ctx context.Context, req request.GetListPostRequest) ([]*model.Post, *int64, error) {
	ret := _m.Called(ctx, req)

	var r0 []*model.Post
	var r1 *int64
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, request.GetListPostRequest) ([]*model.Post, *int64, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, request.GetListPostRequest) []*model.Post); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Post)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, request.GetListPostRequest) *int64); ok {
		r1 = rf(ctx, req)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*int64)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, request.GetListPostRequest) error); ok {
		r2 = rf(ctx, req)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetOneById provides a mock function with given fields: ctx, id
func (_m *PostRepository) GetOneById(ctx context.Context, id string) (*model.Post, error) {
	ret := _m.Called(ctx, id)

	var r0 *model.Post
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*model.Post, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *model.Post); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Post)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, post
func (_m *PostRepository) Update(ctx context.Context, post *model.Post) error {
	ret := _m.Called(ctx, post)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.Post) error); ok {
		r0 = rf(ctx, post)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewPostRepository creates a new instance of PostRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPostRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *PostRepository {
	mock := &PostRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
