// Code generated by mockery v2.34.2. DO NOT EDIT.

package mocks

import (
	context "context"
	multipart "mime/multipart"

	mock "github.com/stretchr/testify/mock"

	uploader "github.com/cloudinary/cloudinary-go/v2/api/uploader"
)

// CloudinaryRepository is an autogenerated mock type for the CloudinaryRepository type
type CloudinaryRepository struct {
	mock.Mock
}

// GetAssetInfo provides a mock function with given fields: ctx
func (_m *CloudinaryRepository) GetAssetInfo(ctx context.Context) {
	_m.Called(ctx)
}

// TransformImage provides a mock function with given fields: ctx
func (_m *CloudinaryRepository) TransformImage(ctx context.Context) {
	_m.Called(ctx)
}

// UploadFileCloud provides a mock function with given fields: ctx, file
func (_m *CloudinaryRepository) UploadFileCloud(ctx context.Context, file *multipart.FileHeader) (*uploader.UploadResult, error) {
	ret := _m.Called(ctx, file)

	var r0 *uploader.UploadResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *multipart.FileHeader) (*uploader.UploadResult, error)); ok {
		return rf(ctx, file)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *multipart.FileHeader) *uploader.UploadResult); ok {
		r0 = rf(ctx, file)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*uploader.UploadResult)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *multipart.FileHeader) error); ok {
		r1 = rf(ctx, file)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewCloudinaryRepository creates a new instance of CloudinaryRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCloudinaryRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *CloudinaryRepository {
	mock := &CloudinaryRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
