// Code generated by mockery v2.34.2. DO NOT EDIT.

package mocks

import (
	constants "echo_template/pkg/constants"

	mock "github.com/stretchr/testify/mock"
)

// JwtService is an autogenerated mock type for the JwtService type
type JwtService struct {
	mock.Mock
}

// GenerateAuthTokens provides a mock function with given fields: userID
func (_m *JwtService) GenerateAuthTokens(userID string) (string, string, error) {
	ret := _m.Called(userID)

	var r0 string
	var r1 string
	var r2 error
	if rf, ok := ret.Get(0).(func(string) (string, string, error)); ok {
		return rf(userID)
	}
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(userID)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string) string); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Get(1).(string)
	}

	if rf, ok := ret.Get(2).(func(string) error); ok {
		r2 = rf(userID)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GenerateToken provides a mock function with given fields: userID, tokenType, expiresIn
func (_m *JwtService) GenerateToken(userID string, tokenType constants.TokenType, expiresIn int64) (string, error) {
	ret := _m.Called(userID, tokenType, expiresIn)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string, constants.TokenType, int64) (string, error)); ok {
		return rf(userID, tokenType, expiresIn)
	}
	if rf, ok := ret.Get(0).(func(string, constants.TokenType, int64) string); ok {
		r0 = rf(userID, tokenType, expiresIn)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string, constants.TokenType, int64) error); ok {
		r1 = rf(userID, tokenType, expiresIn)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ValidateToken provides a mock function with given fields: token, tokenType
func (_m *JwtService) ValidateToken(token string, tokenType constants.TokenType) (*string, error) {
	ret := _m.Called(token, tokenType)

	var r0 *string
	var r1 error
	if rf, ok := ret.Get(0).(func(string, constants.TokenType) (*string, error)); ok {
		return rf(token, tokenType)
	}
	if rf, ok := ret.Get(0).(func(string, constants.TokenType) *string); ok {
		r0 = rf(token, tokenType)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*string)
		}
	}

	if rf, ok := ret.Get(1).(func(string, constants.TokenType) error); ok {
		r1 = rf(token, tokenType)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewJwtService creates a new instance of JwtService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewJwtService(t interface {
	mock.TestingT
	Cleanup(func())
}) *JwtService {
	mock := &JwtService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
