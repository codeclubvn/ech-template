// Code generated by mockery v2.34.2. DO NOT EDIT.

package mocks

import (
	context "context"
	entity "trial_backend/domain/entity"

	mock "github.com/stretchr/testify/mock"

	model "trial_backend/domain/repo/model"

	request "trial_backend/presenter/request"
)

// AuthService is an autogenerated mock type for the AuthService type
type AuthService struct {
	mock.Mock
}

// Login provides a mock function with given fields: ctx, req
func (_m *AuthService) Login(ctx context.Context, req request.LoginRequest) (*entity.LoginResponse, error) {
	ret := _m.Called(ctx, req)

	var r0 *entity.LoginResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, request.LoginRequest) (*entity.LoginResponse, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, request.LoginRequest) *entity.LoginResponse); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.LoginResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, request.LoginRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LoginByGoogle provides a mock function with given fields: ctx, req
func (_m *AuthService) LoginByGoogle(ctx context.Context, req request.LoginByGoogleRequest) (*entity.LoginResponse, error) {
	ret := _m.Called(ctx, req)

	var r0 *entity.LoginResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, request.LoginByGoogleRequest) (*entity.LoginResponse, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, request.LoginByGoogleRequest) *entity.LoginResponse); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.LoginResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, request.LoginByGoogleRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Register provides a mock function with given fields: ctx, req
func (_m *AuthService) Register(ctx context.Context, req request.RegisterRequest) (*model.User, error) {
	ret := _m.Called(ctx, req)

	var r0 *model.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, request.RegisterRequest) (*model.User, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, request.RegisterRequest) *model.User); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, request.RegisterRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RegisterByGoogle provides a mock function with given fields: ctx, req
func (_m *AuthService) RegisterByGoogle(ctx context.Context, req request.UserGoogleRequest) (*model.User, error) {
	ret := _m.Called(ctx, req)

	var r0 *model.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, request.UserGoogleRequest) (*model.User, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, request.UserGoogleRequest) *model.User); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, request.UserGoogleRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewAuthService creates a new instance of AuthService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAuthService(t interface {
	mock.TestingT
	Cleanup(func())
}) *AuthService {
	mock := &AuthService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
